{"version":3,"sources":["components/common/nav/images/balcon-padel-logo-png.png","components/common/nav/Nav.js","components/common/index.js","components/pages/about/About.js","components/pages/schedule/subpages/day.js","components/pages/schedule/subpages/week.js","components/pages/schedule/subpages/month.js","components/pages/schedule/subpages/schedule-logic/useSchedule.js","components/pages/schedule/Schedule.js","components/pages/home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","src","PadelLogo","alt","exact","to","activeClassName","id","onClick","nav","document","querySelector","links","querySelectorAll","classList","toggle","forEach","link","Common","About","DaySchedule","useSchedule","getPrevDay","getNextDay","getPrevMonth","getNextMonth","todayButton","selectedDate","dateDisplay","getCurrentDate","daysOfWeek","getDay","getDate","WeekSchedule","getPrevWeek","getNextWeek","daysShort","weekDaysArr","Date","map","day","Object","values","week","month","year","MonthSchedule","monthDaysArr","prevDaysArr","nextDaysArr","reverse","prevMonthDays","nextMonthDays","daysOfWeekArr","daysShortArr","monthNamesArr","monthNames","today","getMonth","getFullYear","useState","setSelectedDate","getDayOfWeek","firstDayInWeekDate","firstDayInWeekFullDate","lastDayInWeekDate","lastDayInWeekFullDate","firstDayInMonth","firstDayInNextMonth","lastDayInMonth","lastDayInPrevMonth","monthStartingPoint","monthEndingPoint","prevValue","weekDaysArrCreate","i","push","fullDate","getPrevMonthDays","getNextMonthDays","monthDaysArrCreate","a","b","Schedule","scheduleState","setScheduleState","value","name","onChange","e","selectedSchedule","target","scheduleTest","scheduleSwitch","HomePage","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7109d3db.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/balcon-padel-logo-png.35aeb338.png\";","import React from \"react\";\r\nimport \"./Nav.css\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport PadelLogo from './images/balcon-padel-logo-png.png';\r\n\r\nconst Nav = () => {\r\n    \r\n    function burgerClick(){\r\n        const nav = document.querySelector('.nav-bar-links');\r\n        const links = document.querySelectorAll('.nav-bar-links li');\r\n\r\n        nav.classList.toggle('nav-active');\r\n        links.forEach(link =>{\r\n        link.classList.toggle('fade');\r\n        });\r\n    }\r\n    return (\r\n        <div className=\"nav-bar-container\">\r\n            <div className=\"header-logo\">\r\n                <img src={PadelLogo} alt=\"logo\"></img>\r\n            </div>\r\n            <ul className=\"nav-bar-links\">\r\n                <NavLink exact to=\"/\" activeClassName=\"selected-nav-link\">\r\n                    <li>Inicio</li>\r\n                </NavLink>\r\n                <NavLink to=\"/turnos\" activeClassName=\"selected-nav-link\">\r\n                    <li>Turnos</li>\r\n                </NavLink>\r\n                <NavLink to=\"/about\" activeClassName=\"selected-nav-link\">\r\n                    <li>About</li>\r\n                </NavLink>\r\n            </ul>\r\n            <div id=\"burger-container\" onClick={burgerClick}>\r\n                <div className=\"burger-top\"></div>\r\n                <div className=\"burger-mid\"></div>\r\n                <div className=\"burger-bot\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport Nav from './nav/Nav';\r\n\r\nconst Common = () => {\r\n    return (\r\n        <Nav />\r\n    )\r\n};\r\n\r\nexport default Common;","import React from 'react';\r\nimport './About.css';\r\n\r\nfunction About (){\r\n    return (\r\n        <div>\r\n            <h1>About Page</h1>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default About;","import React, { Fragment, useState } from 'react';\r\nimport './day.css';\r\nimport useSchedule from './schedule-logic/useSchedule';\r\n\r\n\r\n\r\nconst DaySchedule = () => {\r\n    const { getPrevDay, getNextDay, getPrevMonth, getNextMonth, todayButton, selectedDate, getCurrentDate, dateDisplay, daysOfWeek } = useSchedule();\r\n            \r\n\r\n    return(\r\n        <Fragment>\r\n            <div className=\"month-info-container\">\r\n                <button className=\"month-change-button\" onClick={getPrevMonth}>Prev</button>\r\n                <button className=\"month-change-button\" onClick={getNextMonth}>Next</button>\r\n                <h1 className=\"date-display\">{dateDisplay}</h1>\r\n                <button className=\"today-button\" onClick={todayButton}>Today</button>\r\n            </div>\r\n            <div>\r\n                <button className=\"day-change-button\" onClick={getPrevDay}>Prev</button>\r\n                <button className=\"day-change-button\" onClick={getNextDay}>Next</button>\r\n            </div>\r\n            <div className=\"day-schedule-container\">\r\n                <div className=\"day-schedule\">\r\n                    <div className=\"day-name-container\">\r\n                    {\r\n                        <div className=\"week-day\">{daysOfWeek[selectedDate.getDay()]}</div> \r\n                    }\r\n                    </div>\r\n                    <div className=\"day-container\">\r\n                    {\r\n                        <div className=\"month-day\">{selectedDate.getDate()}</div>\r\n                    }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default DaySchedule;","import React, { Fragment, useState } from 'react';\r\nimport './week.css';\r\nimport useSchedule from './schedule-logic/useSchedule';\r\n\r\nconst WeekSchedule = () => {\r\n    const { getPrevWeek, getNextWeek, getPrevMonth, getNextMonth, todayButton, daysShort, selectedDate, getCurrentDate,  weekDaysArr, dateDisplay } = useSchedule();\r\n    \r\n    const today = new Date();\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n            <div className=\"month-info-container\">\r\n                <button className=\"month-change-button\" onClick={getPrevMonth}>Prev</button>\r\n                <button className=\"month-change-button\" onClick={getNextMonth}>Next</button>\r\n                <h1 className=\"date-display\">{dateDisplay}</h1>\r\n                <button className=\"today-button\" onClick={todayButton}>Today</button>\r\n            </div>\r\n            <div>\r\n                <button className=\"day-change-button\" onClick={getPrevWeek}>Prev</button>\r\n                <button className=\"day-change-button\" onClick={getNextWeek}>Next</button>\r\n            </div>\r\n            <div className=\"week-schedule-container\">\r\n                <div className=\"week-schedule\">\r\n                    <div className=\"day-name-container\">\r\n                    { \r\n                        daysShort.map(day => \r\n                            <div key={day} className=\"week-day\">{day}</div>\r\n                        ) \r\n                    }\r\n                    </div>\r\n                    <div className=\"week-row-container\">\r\n                        {\r\n                            Object.values(weekDaysArr).map(week => {if(`${week.day}/${week.month}/${week.year}` === getCurrentDate){\r\n                                return <div key={`${week.day}/${week.month}/${week.year}`} className=\"month-day today-highlight\">{week.day}</div>\r\n                            } else {\r\n                                return <div key={`${week.day}/${week.month}/${week.year}`} className=\"month-day\">{week.day}</div>\r\n                            }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default WeekSchedule;","import React, { Fragment, useState } from 'react';\r\nimport './month.css';\r\nimport useSchedule from './schedule-logic/useSchedule';\r\n\r\nconst MonthSchedule = () => {\r\n    const { getPrevMonth, getNextMonth, todayButton, daysShort, selectedDate, getCurrentDate,  monthDaysArr, dateDisplay, prevDaysArr, nextDaysArr } = useSchedule();\r\n    \r\n  \r\n    return(\r\n        <Fragment>\r\n            <div className=\"month-info-container\">\r\n                <button className=\"month-change-button\" onClick={getPrevMonth}>Prev</button>\r\n                <button className=\"month-change-button\" onClick={getNextMonth}>Next</button>\r\n                <h1 className=\"date-display\">{dateDisplay}</h1>\r\n                <button className=\"today-button\" onClick={todayButton}>Today</button>\r\n            </div>\r\n            <div className=\"month-schedule-container\">\r\n                <div className=\"month-schedule\">\r\n                    <div className=\"day-name-container\">\r\n                    { \r\n                        daysShort.map(day => \r\n                            <div key={day} className=\"week-day\">{day}</div>\r\n                        ) \r\n                    }\r\n                    </div>\r\n                    <div className=\"month-container\">   \r\n                    {\r\n                        //For Prev Days\r\n                        Object.values(prevDaysArr.reverse()).map(month => {\r\n                            return <div key={`${month.prevMonthDays}/${month.month}/${month.year}`} className=\"month-day in-prev-month\">{month.day}</div>\r\n                        })\r\n                    }   \r\n                    {\r\n                        //For Current Days\r\n                        Object.values(monthDaysArr).map(month => {if(`${month.day}/${month.month}/${month.year}` === getCurrentDate){\r\n                            return <div key={`${month.day}/${month.month}/${month.year}`} className=\"month-day today-highlight\">{month.day}</div>\r\n                        } else {\r\n                            return <div key={`${month.day}/${month.month}/${month.year}`} className=\"month-day\">{month.day}</div>\r\n                        }\r\n                        })\r\n                    }\r\n                    {\r\n                        //For Next Days\r\n                        Object.values(nextDaysArr).map(month => {\r\n                            return <div key={`${month.nextMonthDays}/${month.month}/${month.year}`} className=\"month-day in-next-month\">{month.day}</div>\r\n                        })\r\n                    } \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MonthSchedule;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport DaySchedule from '../day';\r\nimport WeekSchedule from '../week';\r\nimport MonthSchedule from '../month';\r\n\r\nexport const daysOfWeekArr = [\r\n    'Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'\r\n    /* 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' */\r\n]\r\n\r\nexport const daysShortArr = [\r\n    'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab', 'Dom'\r\n    /* 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun' */\r\n];\r\n\r\nexport const monthNamesArr = [\r\n  'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\r\n  /* 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' */\r\n];\r\n\r\n\r\nconst useSchedule = (daysShort = daysShortArr, monthNames = monthNamesArr, daysOfWeek = daysOfWeekArr) => {\r\n    const today = new Date();\r\n    const todayFormatted = `${today.getDate()}-${today.getMonth() + 1}-${today.getFullYear()}`;\r\n    const [selectedDate, setSelectedDate] = useState(today);\r\n\r\n    //Current Date\r\n    const getDay = today.getDate();\r\n    const getDayOfWeek = selectedDate.getDay();\r\n    const getCurrentDate = `${today.getDate()}/${today.getMonth()}/${today.getFullYear()}`;\r\n\r\n    //Date Display\r\n    let dateDisplay = `${monthNames[selectedDate.getMonth()]}  ${selectedDate.getFullYear()}`;\r\n    const todayButton = ()=>{\r\n        setSelectedDate(selectedDate => new Date(today.getFullYear(), today.getMonth(), today.getDate()));\r\n    };\r\n\r\n    //First/Last Day\r\n        //First Day in Week\r\n        let firstDayInWeekDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate() + (getDayOfWeek == 0 ? - 6 : 1) - getDayOfWeek).getDate();\r\n\r\n        let firstDayInWeekFullDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate() + (getDayOfWeek == 0 ? - 6 : 1) - getDayOfWeek);\r\n        //Last Day in Week\r\n        let lastDayInWeekDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate() + (getDayOfWeek == 0 ? 0 : 7) - getDayOfWeek).getDate();\r\n\r\n        let lastDayInWeekFullDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate() + (getDayOfWeek == 0 ? 0 : 7) - getDayOfWeek);\r\n\r\n        //First Day in Month\r\n        const firstDayInMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1).getDate();\r\n        const firstDayInNextMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 1).getDate();\r\n        //Last Day in Month\r\n        const lastDayInMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate();\r\n        const lastDayInPrevMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth() , 0).getDate();\r\n\r\n    //Start/End\r\n    let monthStartingPoint = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1).getDay();\r\n    let monthEndingPoint = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDay();\r\n\r\n    //Day Generator\r\n        //Day Function\r\n            //Prev Day\r\n            const getPrevDay = ()=>{\r\n                setSelectedDate(prevValue => new Date(prevValue.getFullYear(), prevValue.getMonth(), prevValue.getDate() - 1))\r\n            }\r\n            //Prev Day\r\n            const getNextDay = ()=>{\r\n                setSelectedDate(prevValue => new Date(prevValue.getFullYear(), prevValue.getMonth(), prevValue.getDate() + 1))\r\n            }\r\n    \r\n    //Week Generator \r\n        //Week Function\r\n        const weekDaysArr = [];\r\n        const weekDaysArrCreate = ()=>{\r\n            //If Week Is Between 2 Months\r\n            if(firstDayInWeekDate > lastDayInWeekDate){\r\n                //If Week Starts In Last Day Of Month\r\n                if(firstDayInWeekDate <= lastDayInPrevMonth && firstDayInWeekDate >= 30){\r\n                    //Push Last Day In Month To Arr\r\n                    for(let i = firstDayInWeekDate; i <= lastDayInPrevMonth; i++){\r\n                        weekDaysArr.push({\r\n                            day: i,\r\n                            month: `${selectedDate.getMonth()}`,\r\n                            year: `${selectedDate.getFullYear()}`,\r\n                            fullDate: `${selectedDate.getDate()}/${selectedDate.getMonth()}/${selectedDate.getFullYear()}` \r\n                        })\r\n                    }\r\n                    //Push Rest Of Week To Arr\r\n                    for(let i = firstDayInMonth; i <= lastDayInWeekDate; i++){\r\n                        weekDaysArr.push({\r\n                            day: i,\r\n                            month: `${selectedDate.getMonth()}`,\r\n                            year: `${selectedDate.getFullYear()}`,\r\n                            fullDate: `${selectedDate.getDate()}/${selectedDate.getMonth()}/${selectedDate.getFullYear()}` \r\n                        })\r\n                    }\r\n                    if(firstDayInWeekFullDate.getFullYear() !== lastDayInWeekFullDate.getFullYear()){\r\n                        dateDisplay = `${monthNames[firstDayInWeekFullDate.getMonth()]} ${firstDayInWeekFullDate.getFullYear()} - ${monthNames[lastDayInWeekFullDate.getMonth()]}  ${lastDayInWeekFullDate.getFullYear()}`;\r\n                    } else {\r\n                        dateDisplay = `${monthNames[selectedDate.getMonth() - 1]} - ${monthNames[selectedDate.getMonth()]}  ${selectedDate.getFullYear()}`;\r\n                    }\r\n                } else {\r\n                    for(let i = firstDayInWeekDate; i <= lastDayInMonth; i++){\r\n                        weekDaysArr.push({\r\n                            day: i,\r\n                            month: `${selectedDate.getMonth()}`,\r\n                            year: `${selectedDate.getFullYear()}`,\r\n                            fullDate: `${selectedDate.getDate()}/${selectedDate.getMonth()}/${selectedDate.getFullYear()}` \r\n                        })\r\n                    }\r\n                    for(let i = firstDayInNextMonth; i <= lastDayInWeekDate; i++){\r\n                        weekDaysArr.push({\r\n                            day: i,\r\n                            month: `${selectedDate.getMonth()}`,\r\n                            year: `${selectedDate.getFullYear()}`,\r\n                            fullDate: `${selectedDate.getDate()}/${selectedDate.getMonth()}/${selectedDate.getFullYear()}` \r\n                        })\r\n                    }\r\n                    if(firstDayInWeekFullDate.getFullYear() !== lastDayInWeekFullDate.getFullYear()){\r\n                        dateDisplay = `${monthNames[firstDayInWeekFullDate.getMonth()]} ${firstDayInWeekFullDate.getFullYear()} - ${monthNames[lastDayInWeekFullDate.getMonth()]}  ${lastDayInWeekFullDate.getFullYear()}`;\r\n                    } else {\r\n                        dateDisplay = `${monthNames[selectedDate.getMonth()]} - ${monthNames[selectedDate.getMonth() + 1]}  ${selectedDate.getFullYear()}`;\r\n                    }\r\n                } \r\n            } else {\r\n                //Normal Week\r\n                for(let i = firstDayInWeekDate; i <= lastDayInWeekDate; i++){\r\n                    weekDaysArr.push({\r\n                        day: i,\r\n                        month: `${selectedDate.getMonth()}`,\r\n                        year: `${selectedDate.getFullYear()}`,\r\n                        fullDate: `${selectedDate.getDate()}/${selectedDate.getMonth()}/${selectedDate.getFullYear()}` \r\n                    })\r\n                }\r\n            }\r\n        }\r\n        weekDaysArrCreate();\r\n        \r\n            //Prev Prev Week\r\n            const getPrevWeek = () => {\r\n                setSelectedDate(firstDayInWeekDate => new Date(firstDayInWeekDate.getFullYear(), firstDayInWeekDate.getMonth(), firstDayInWeekDate.getDate() - 7));\r\n            } \r\n            //Prev Next Week\r\n            const getNextWeek = () => {\r\n                //setSelectedDate(prevValue => new Date(prevValue.getFullYear(), prevValue.getMonth(), prevValue.getDate() + 7));\r\n                setSelectedDate(firstDayInWeekDate => new Date(firstDayInWeekDate.getFullYear(), firstDayInWeekDate.getMonth(), firstDayInWeekDate.getDate() + 7));\r\n            }       \r\n\r\n    //Month Generator \r\n        //Month Function\r\n        const monthDaysArr = [];\r\n        const prevDaysArr = [];\r\n        const nextDaysArr = [];\r\n        let getPrevMonthDays = lastDayInPrevMonth;\r\n        let getNextMonthDays = firstDayInNextMonth;\r\n        \r\n        const monthDaysArrCreate = ()=>{\r\n            //For Prev Days\r\n            if(monthStartingPoint == 0){\r\n                for(let a = 1; a < (monthStartingPoint + 7); a++){\r\n                    prevDaysArr.push({\r\n                        prevMonthDays: a,\r\n                        day: `${getPrevMonthDays}`,\r\n                        month: `${(selectedDate.getMonth() - 1)}`,\r\n                        year: `${selectedDate.getFullYear()}`,\r\n                        fullDate: `${selectedDate.getDate()}/${(selectedDate.getMonth() - 1)}/${selectedDate.getFullYear()}`\r\n                    })\r\n                    getPrevMonthDays--;\r\n                }\r\n            } else {\r\n                for(let a = 1; a < monthStartingPoint; a++){\r\n                    prevDaysArr.push({\r\n                        prevMonthDays: a,\r\n                        day: `${getPrevMonthDays}`,\r\n                        month: `${(selectedDate.getMonth() - 1)}`,\r\n                        year: `${selectedDate.getFullYear()}`,\r\n                        fullDate: `${selectedDate.getDate()}/${(selectedDate.getMonth() - 1)}/${selectedDate.getFullYear()}`\r\n                    })\r\n                    getPrevMonthDays--;\r\n                }\r\n            }\r\n            //For Current Days\r\n            for(let i = firstDayInMonth; i <= lastDayInMonth; i++){\r\n                monthDaysArr.push({\r\n                    day: i,\r\n                    month: `${selectedDate.getMonth()}`,\r\n                    year: `${selectedDate.getFullYear()}`,\r\n                    fullDate: `${selectedDate.getDate()}/${selectedDate.getMonth()}/${selectedDate.getFullYear()}` \r\n                })\r\n            }\r\n            //For Next Days\r\n            for(let b = 0; b < (7 - monthEndingPoint); b++){\r\n                if(monthEndingPoint != 0){\r\n                nextDaysArr.push({\r\n                    nextMonthDays: b,\r\n                    day: `${getNextMonthDays}`,\r\n                    month: `${selectedDate.getMonth() + 1}`,\r\n                    year: `${selectedDate.getFullYear()}`,\r\n                    fullDate: `${selectedDate.getDate()}/${selectedDate.getMonth() + 1}/${selectedDate.getFullYear()}`\r\n                })\r\n                getNextMonthDays++;\r\n            }}\r\n        }\r\n        monthDaysArrCreate();\r\n        \r\n        \r\n            //Prev Next Month\r\n            const getPrevMonth = () => {\r\n                setSelectedDate(prevValue => new Date(prevValue.getFullYear(), prevValue.getMonth() - 1, selectedDate.getDate()));\r\n            }\r\n            const getNextMonth = () => {\r\n                setSelectedDate(prevValue => new Date(prevValue.getFullYear(), prevValue.getMonth() + 1, selectedDate.getDate()));\r\n            }\r\n            \r\n    \r\n    \r\n    \r\n    return {\r\n        //Schedules\r\n        DaySchedule,\r\n        WeekSchedule,\r\n        MonthSchedule,\r\n        //Prev/Next/Current\r\n        getPrevDay,\r\n        getNextDay,\r\n        getPrevWeek,\r\n        getNextWeek,\r\n        getPrevMonth,\r\n        getNextMonth,\r\n        getCurrentDate,\r\n        dateDisplay,\r\n        //Selected Date\r\n        selectedDate,\r\n        //Days/Months\r\n        daysOfWeek,\r\n        daysShort,\r\n        monthNames,\r\n        weekDaysArr,\r\n        monthDaysArr,\r\n        prevDaysArr,\r\n        nextDaysArr,\r\n        today,\r\n        todayButton,\r\n        //\r\n        firstDayInWeekDate,\r\n        lastDayInWeekDate,\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default useSchedule;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport './Schedule.css';\r\n\r\n//Logic\r\nimport useSchedule from './subpages/schedule-logic/useSchedule'\r\n\r\n\r\n\r\nconst Schedule = () => {\r\n    const { DaySchedule, WeekSchedule, MonthSchedule } = useSchedule();\r\n\r\n\r\n    const [scheduleState, setScheduleState] = useState(\"month\");\r\n    \r\n    function scheduleSwitch(scheduleState) {\r\n        let scheduleTest = scheduleState;\r\n        if (scheduleTest == 'day') {\r\n            return <DaySchedule />\r\n        } else if (scheduleTest == 'week'){\r\n            return <WeekSchedule />\r\n        } else if (scheduleTest == 'month'){\r\n            return <MonthSchedule />\r\n        } else if (scheduleTest == 'year'){\r\n            return \"year\"\r\n        }\r\n    }\r\n    \r\n    \r\n    return(\r\n        <Fragment>\r\n            <div className=\"schedule-container\">\r\n                <div className=\"top-date-container\">\r\n                    \r\n                    <select value={scheduleState} name=\"schedule-selector\" className=\"schedule-selection\" onChange={(e)=>{\r\n                        const selectedSchedule = e.target.value;\r\n                        setScheduleState(selectedSchedule);\r\n                    }}>\r\n                        <option value=\"day\">Day</option>\r\n                        <option value=\"week\">Week</option>\r\n                        <option value=\"month\">Month</option>\r\n                        <option value=\"year\">Year</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    {scheduleSwitch(scheduleState)}\r\n                </div>\r\n                \r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Schedule;","import React from 'react';\r\nimport './Home.css';\r\n\r\nfunction HomePage (){\r\n    return (\r\n        <div>\r\n            <h1>Home Page</h1>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HomePage;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Common from './components/common/index.js';\nimport About from './components/pages/about/About';\nimport Schedule from './components/pages/schedule/Schedule';\nimport HomePage from './components/pages/home/Home';\n\n\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Common />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/turnos\" component={Schedule} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}